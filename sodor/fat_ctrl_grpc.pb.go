// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: sodor/fat_ctrl.proto

package sodor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FatControllerClient is the client API for FatController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FatControllerClient interface {
	HandShakeWithThomas(ctx context.Context, in *ThomasHandShakeReq, opts ...grpc.CallOption) (*ThomasHandShakeResp, error)
	UpdateTaskInstance(ctx context.Context, in *TaskInstance, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fatControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewFatControllerClient(cc grpc.ClientConnInterface) FatControllerClient {
	return &fatControllerClient{cc}
}

func (c *fatControllerClient) HandShakeWithThomas(ctx context.Context, in *ThomasHandShakeReq, opts ...grpc.CallOption) (*ThomasHandShakeResp, error) {
	out := new(ThomasHandShakeResp)
	err := c.cc.Invoke(ctx, "/FatController/HandShakeWithThomas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fatControllerClient) UpdateTaskInstance(ctx context.Context, in *TaskInstance, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/FatController/UpdateTaskInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FatControllerServer is the server API for FatController service.
// All implementations must embed UnimplementedFatControllerServer
// for forward compatibility
type FatControllerServer interface {
	HandShakeWithThomas(context.Context, *ThomasHandShakeReq) (*ThomasHandShakeResp, error)
	UpdateTaskInstance(context.Context, *TaskInstance) (*EmptyResponse, error)
	mustEmbedUnimplementedFatControllerServer()
}

// UnimplementedFatControllerServer must be embedded to have forward compatible implementations.
type UnimplementedFatControllerServer struct {
}

func (UnimplementedFatControllerServer) HandShakeWithThomas(context.Context, *ThomasHandShakeReq) (*ThomasHandShakeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandShakeWithThomas not implemented")
}
func (UnimplementedFatControllerServer) UpdateTaskInstance(context.Context, *TaskInstance) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskInstance not implemented")
}
func (UnimplementedFatControllerServer) mustEmbedUnimplementedFatControllerServer() {}

// UnsafeFatControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FatControllerServer will
// result in compilation errors.
type UnsafeFatControllerServer interface {
	mustEmbedUnimplementedFatControllerServer()
}

func RegisterFatControllerServer(s grpc.ServiceRegistrar, srv FatControllerServer) {
	s.RegisterService(&FatController_ServiceDesc, srv)
}

func _FatController_HandShakeWithThomas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThomasHandShakeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FatControllerServer).HandShakeWithThomas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FatController/HandShakeWithThomas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FatControllerServer).HandShakeWithThomas(ctx, req.(*ThomasHandShakeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FatController_UpdateTaskInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FatControllerServer).UpdateTaskInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FatController/UpdateTaskInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FatControllerServer).UpdateTaskInstance(ctx, req.(*TaskInstance))
	}
	return interceptor(ctx, in, info, handler)
}

// FatController_ServiceDesc is the grpc.ServiceDesc for FatController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FatController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FatController",
	HandlerType: (*FatControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandShakeWithThomas",
			Handler:    _FatController_HandShakeWithThomas_Handler,
		},
		{
			MethodName: "UpdateTaskInstance",
			Handler:    _FatController_UpdateTaskInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sodor/fat_ctrl.proto",
}
